<?xml version="1.0"?>

<!--
* Copyright (c) 2003 Sun Microsystems, Inc. All  Rights Reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* -Redistribution of source code must retain the above copyright notice, 
* this list of conditions and the following disclaimer.
*
* -Redistribution in binary form must reproduce the above copyright notice, 
* this list of conditions and the following disclaimer in the documentation
* and/or other materials provided with the distribution.
*
* Neither the name of Sun Microsystems, Inc. or the names of contributors may 
* be used to endorse or promote products derived from this software without 
* specific prior written permission.
* 
* This software is provided "AS IS," without a warranty of any kind.
* ALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING
* ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
* NON-INFRINGEMENT, ARE HEREBY EXCLUDED. SUN MIDROSYSTEMS, INC. ("SUN") AND ITS
* LICENSORS SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A
* RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
* IN NO EVENT WILL SUN OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT
* OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR
* PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY,
* ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF SUN HAS
* BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
*
* You acknowledge that this software is not designed or intended for use in the
* design, construction, operation or maintenance of any nuclear facility.
-->

<project name="JOALTest" basedir="." default="all">

    <property name="junit.path" value="${basedir}/${gluegen.root}/make/lib/junit.jar"/>
    <property name="ant-contrib.jar"  value="${gluegen.root}/make/lib/ant-contrib-1.0b3.jar" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath> <pathelement location="${ant-contrib.jar}"/> </classpath>
    </taskdef>

    <import file="${gluegen.root}/make/jogamp-env.xml" />
    <import file="${gluegen.root}/make/gluegen-cpptasks.xml" />

    <target name="declare.common" depends="jogamp.env.init, gluegen.cpptasks.detect.os">
        <property name="rootrel.src.test"     value="src/test" />
        <property name="src.test"             value="${project.root}/${rootrel.src.test}" />

        <property name="results.test"         value="${build}/test/results" />
        <property name="build.test"           value="${build}/test/build" />
        <property name="obj.test"             value="${build.test}/obj"/>

        <property name="classes.test"         value="${build.test}/classes" />
        <property name="classes.test.path"    location="${classes.test}"/> <!-- absolute path -->

        <property name="java.dir.test"        value="com/jogamp/openal/test"/>
        <property name="java.part.test"       value="${java.dir.test}/**"/>
        <property name="java.dir.junit"       value="${java.dir.test}/junit"/>
        <property name="java.dir.manual"      value="${java.dir.test}/manual"/>

        <property name="obj.all.paths"        value="${gluegen.build}/obj${path.separator}${obj}${path.separator}lib/${os.and.arch}"/>
        <property name="classpath.test"       value="${gluegen-rt.jar}${path.separator}${build}/joal.jar${path.separator}${build}/joal-test.jar${path.separator}${junit.path}"/>

        <property name="test.archive.name"    value="${archive.name}-test-results-${build.node.name}"/>

        <property name="batchtest.timeout"    value="1800000"/> <!-- 30 min -->

        <mkdir dir="${classes.test}"/>
    </target>

    <target name="test.compile" depends="declare.common">
        <!-- Clean the results -->
        <delete quiet="true">
            <fileset dir="${results.test}" includes="**"/>
            <fileset file="${build}/${test.archive.name}.7z"/>
        </delete>
        <mkdir dir="${results.test}"/>
    
        <javac debug="true" srcdir="${src.test}" destdir="${classes.test}" includeantruntime="false"
            classpath="${gluegen-rt.jar};${build}/joal.jar;${junit.path}"/>
        <copy todir="${classes.test}">
            <fileset dir="${src.test}" includes="**/*.wav"/>
        </copy>
        <jar destfile="${build}/joal-test.jar">
            <fileset dir="${classes.test}">
              <include name="**" />
            </fileset>
        </jar>
    </target>
    
    <target name="clean">
        <delete dir="${build.test}"/>
    </target>
    
    <target name="test.auto.run" depends="junit.run"/>

    <target name="junit.run" depends="test.compile">
        <junit forkmode="once" showoutput="true" fork="true" includeAntRuntime="true">
            <env key="${system.env.library.path}" path="${obj.all.paths}"/>
            <jvmarg value="${jvmDataModel.arg}"/>
            <jvmarg value="-Djava.library.path=${obj.all.paths}"/>
            <!--
            <jvmarg value="-Djogamp.debug.NativeLibrary=true"/>
            <jvmarg value="-Djogamp.debug.NativeLibrary.Lookup=true"/>
            <jvmarg value="-Djogamp.debug.ProcAddressHelper=true"/> -->
            <jvmarg value="-Djoal.debug.Factory"/>
            <batchtest todir="${results.test}">
                <fileset dir="${classes.test}">
                    <include name="${java.dir.junit}/**/*Test*"/>
                </fileset>
                <formatter usefile="false" type="plain"/>
                <formatter usefile="true" type="xml"/>
            </batchtest>
            <classpath>
                <path path="${classpath.test}"/>
            </classpath>
        </junit>
        <antcall target="test-zip-archive" inheritRefs="true" inheritAll="true"/>
    </target>
    
    <target name="test.manual.run" depends="test.compile">
        <for param="test.class.path.m" keepgoing="true">
            <!-- results in absolute path -->
            <fileset dir="${classes.test}">
                <include name="${java.dir.manual}/**/*Test*"/>
                <exclude name="**/*$$*"/>
            </fileset>
          <sequential>
            <var name="test.class.path" unset="true"/>
            <property name="test.class.path" basedir="${classes.test}" relative="true" location="@{test.class.path.m}"/>
            <var name="test.class.fqn" unset="true"/>
            <pathconvert property="test.class.fqn">
              <fileset file="${classes.test}${file.separator}${test.class.path}"/>
              <chainedmapper>
                  <globmapper    from="${classes.test.path}${file.separator}*" to="*"/> <!-- rel. -->
                  <packagemapper from="*.class"           to="*"/> <!-- FQCN -->
              </chainedmapper>
            </pathconvert>
            <var name="test.class.result.file" value="${results.test}/TEST-${test.class.fqn}.log"/>
            <echo message="Testing ${test.class.fqn} -- ${test.class.result.file}"/>
            <apply dir="." executable="${java.home}/bin/java" 
                 parallel="false" 
                 timeout="${batchtest.timeout}"
                 vmlauncher="false"
                 relative="true"
                 failonerror="false"
                 output="${test.class.result.file}">
                <env key="${system.env.library.path}" path="${obj.all.paths}"/>
                <env key="CLASSPATH" value="${classpath.test}"/>
                <arg line="${jvmDataModel.arg}"/>
                <arg value="-Djava.library.path=${obj.all.paths}"/>
                <!--
                <arg line="-Djogamp.debug.NativeLibrary=true"/>
                <arg line="-Djogamp.debug.NativeLibrary.Lookup=true"/>
                <arg line="-Djogamp.debug.ProcAddressHelper=true"/> -->
                <arg line="-Djoal.debug.Factory"/>
                <srcfile/>
                <mappedresources>
                    <fileset dir="${classes.test}" includes="${test.class.path}"/>
                    <packagemapper from="*.class" to="*"/>
                </mappedresources>
            </apply>
          </sequential>
        </for>
        <antcall target="test-zip-archive" inheritRefs="true" inheritAll="true"/>
    </target>

    <!-- updates / create the test results zip file -->
    <target name="test-zip-archive" depends="declare.common">
        <archive.7z destfile="${build}/${test.archive.name}.7z"
                    basedir="${results.test}" 
                    includes="**" />
    </target>

</project>
